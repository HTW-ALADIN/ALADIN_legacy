version: "3.8"
services:
    server:
        build:
            context: server/
            dockerfile: server.Dockerfile
        container_name: server
        depends_on:
            - rabbitmq_1
            - postgres_1
        volumes:
            - ./server:/server
        ports:
            - 8000:8000

    reverse-proxy:
        build:
            context: backend/services/nginx
            dockerfile: nginx.Dockerfile
        depends_on:
            - server
        container_name: reverse-proxy
        volumes:
            - ./backend/services/nginx/nginx.conf:/etc/nginx/nginx.conf
        ports:
            - 80:80
            - 3000:3000

    # schemaspy:
    #     build:
    #         context: backend/services/schemaspy
    #         dockerfile: schemaspy.Dockerfile
    #     depends_on:
    #         - postgres
    #     volumes:
    #         - ./backend/services/schemaspy/output:/output
    #         - ./backend/services/schemaspy:/worker
    #     tty: true
    #     command: tail -f /dev/null

    postgres_1:
        build:
            context: backend/services/postgres
            dockerfile: postgres.Dockerfile
        container_name: postgres_1
        user: 999:999 
        environment:
            POSTGRES_USER: "admin"
            POSTGRES_PASSWORD: "admin"
            POSTGRES_DB: "aladin"
        ports:
            - "5432:5432"
        volumes:
            # - ./backend/services/postgres/data:/var/lib/postgresql/data/
            - postgres-data:/var/lib/postgresql/data

    # postgres_MA:
    #     container_name: postgres_MA
    #     build:
    #         context: backend/services/postgres
    #         dockerfile: postgres.Dockerfile
    #     environment:
    #         POSTGRES_USER: "admin"
    #         POSTGRES_PASSWORD: "admin"
    #         POSTGRES_DB: "aladin"
    #     ports:
    #         - "5430:5430"
    #     volumes:
    #         - C:/Users/pcr/Desktop/postgres_MA/:/var/lib/postgresql/data/

    # mongodb:
    #     build:
    #         context: backend/services/mongodb
    #         dockerfile: mongodb.Dockerfile
    #     container_name: mongodb
    #     environment:
    #         MONGO_INITDB_ROOT_USERNAME: "aladin"
    #         MONGO_INITDB_ROOT_PASSWORD: "aladin"
    #         MONGO_INITDB_DATABASE: "ltidb"
    #     ports:
    #         - "27017:27017"
    #     volumes:
    #         - "./backend/services/mongodb/data:/bitnami/mongodb"
    #     restart: unless-stopped

    # minio:
    #     # build:
    #     #     context: backend/services/minio
    #     #     dockerfile: minio.Dockerfile
    #     image: bitnami/minio:2020.2.20
    #     container_name: minio
    #     ports:
    #         - "9000:9000"
    #     volumes:
    #         - "./backend/services/minio/data:/data"
    #     environment:
    #         MINIO_ACCESS_KEY: minio_access_key
    #         MINIO_SECRET_KEY: minio_secret_key
    #         MINIO_ROOT_USER: minio
    #         MINIO_ROOT_PASSWORD: admin
    #     restart: unless-stopped

    rabbitmq_1:
        build:
            context: backend/services/rabbitmq
            dockerfile: rabbitmq.Dockerfile
        container_name: rabbitmq_1
        ports:
            - "5672:5672"
            - "15672:15672"
        environment:
            RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

    backend_1:
        build:
            context: backend
            dockerfile: orchestrator.Dockerfile
        depends_on:
            - reverse-proxy
            - server
            - rabbitmq_1
            - postgres_1
        container_name: backend_1
        volumes:
            - ./backend:/backend

    # maxima:
    #     build:
    #         context: backend/services/maxima
    #         dockerfile: maxima.Dockerfile
    #     container_name: maxima
    #     volumes:
    #         - ./backend/services/maxima/:/worker/

volumes:
    mongodb_data:
    postgres-data:
